local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Use the button this script is attached to


-- Define the sequence of targets, each with a CFrame and a duration
local targets = {
	{ cframe = CFrame.new(-47, 100, 729), duration = 1 },   -- Step 1
	{ cframe = CFrame.new(-59, 100, 8691), duration = 30 }, -- Step 2
	{ cframe = CFrame.new(-56, -353, 9488), duration = 1 }   -- Step 3
}

-- Define default animation properties
local easingStyle = Enum.EasingStyle.Quad
local easingDirection = Enum.EasingDirection.Out

-- Variables to manage the *currently active* tween step and its resources
local currentTween = nil
local cframeValue = nil
local changedConnection = nil
local completedConnection = nil
local currentSequenceIndex = 0 -- Keep track of the current step for debugging

-- Function to clean up resources of the *currently active* tween step
local function cleanupTweenResources()
	print("Cleanup called for step:", currentSequenceIndex)
	if currentTween and currentTween.PlaybackState == Enum.PlaybackState.Playing then
		print("Cancelling active tween.")
		currentTween:Cancel()
	end
	if changedConnection then
		print("Disconnecting Changed connection.")
		changedConnection:Disconnect()
		changedConnection = nil
	end
	if completedConnection then
		print("Disconnecting Completed connection.")
		completedConnection:Disconnect()
		completedConnection = nil
	end
	if cframeValue then
		print("Destroying CFrameValue.")
		cframeValue:Destroy()
		cframeValue = nil
	end
	currentTween = nil
	-- Reset index tracker after cleanup if sequence is fully stopped
	-- currentSequenceIndex = 0 -- Let's not reset here, keep it for context in logs
end

-- Recursive function to play the tween sequence
local function tweenSequence(index)
	currentSequenceIndex = index -- Update tracker
	print("Attempting to start tweenSequence for index:", index)

	-- Stop if index is out of bounds (sequence finished)
	if index > #targets then
		print("Tween sequence index out of bounds. Cleaning up last step.")
		cleanupTweenResources() -- Clean up the last step's resources
		print("Tween sequence fully completed.")
		currentSequenceIndex = 0 -- Reset tracker
		return
	end

	-- Clean up resources from the *previous* step before starting the new one
	-- Note: cleanupTweenResources() is called here, potentially clearing resources needed by the Completed event of the previous step if called too early.
	-- Let's rely on the Completed event to trigger the next step and handle its own cleanup.
	-- We only need to clean up if the button is clicked again mid-sequence (handled in the click event).

	-- Get the character
	local character = LocalPlayer.Character
	if not character or not character.Parent or not character:IsA("PVInstance") or not character:FindFirstChild("HumanoidRootPart") then
		warn("TweenSequence: Character not found or invalid at start of step", index)
		cleanupTweenResources() -- Ensure cleanup if character disappears mid-sequence
		currentSequenceIndex = 0 -- Reset tracker
		return
	end
	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if not humanoid then
		warn("TweenSequence: Humanoid not found at start of step", index)
		cleanupTweenResources()
		currentSequenceIndex = 0
		return
	end

	-- Get the target data for the current step
	local targetData = targets[index]
	local targetCFrame = targetData.cframe
	local tweenDuration = targetData.duration -- Use the duration specific to this step

	print(string.format("Step %d: Tweening to %s over %.2f seconds.", index, tostring(targetCFrame.Position), tweenDuration))

	-- Create TweenInfo specifically for this step using its duration
	local tweenInfo = TweenInfo.new(
		tweenDuration,
		easingStyle,
		easingDirection
	)

	-- Create a temporary CFrameValue to tween for this step
	-- Ensure previous one is destroyed if somehow still exists (shouldn't happen with proper cleanup)
	if cframeValue then
		warn("Previous CFrameValue existed unexpectedly at start of step", index)
		cframeValue:Destroy()
	end
	cframeValue = Instance.new("CFrameValue")
	cframeValue.Value = character:GetPivot() -- Start from the character's current pivot

	-- Create the tween animation for the CFrameValue for this step
	-- Ensure previous tween is cleaned up (should be handled by Completed/Cancel)
	if currentTween then
		warn("Previous Tween existed unexpectedly at start of step", index)
		currentTween:Cancel() -- Cancel just in case
	end
	currentTween = TweenService:Create(cframeValue, tweenInfo, { Value = targetCFrame })

	-- Disconnect previous connections if they exist (shouldn't happen with proper cleanup)
	if changedConnection then
		warn("Previous Changed connection existed unexpectedly at start of step", index)
		changedConnection:Disconnect()
	end
	if completedConnection then
		warn("Previous Completed connection existed unexpectedly at start of step", index)
		completedConnection:Disconnect()
	end

	-- Store local references to connections for this specific step
	local stepChangedConnection
	local stepCompletedConnection

	-- Update the character's pivot whenever the CFrameValue changes
	stepChangedConnection = cframeValue.Changed:Connect(function(newPivot)
		-- Re-check character validity on each update
		local currentCharacter = LocalPlayer.Character -- Re-fetch in case it changed
		if currentCharacter and currentCharacter.Parent and currentCharacter:IsA("PVInstance") and currentCharacter:FindFirstChild("HumanoidRootPart") then
			local currentHumanoid = currentCharacter:FindFirstChildOfClass("Humanoid")
			if currentHumanoid and currentHumanoid.Health > 0 then
				-- print("Step", index, "PivotTo:", newPivot.Position) -- Can be very spammy, enable if needed
				currentCharacter:PivotTo(newPivot)
			else
				-- Character died or became invalid during the tween update
				warn("TweenSequence: Character died or became invalid during PivotTo update for step", index)
				if currentTween and currentTween.PlaybackState == Enum.PlaybackState.Playing then
					currentTween:Cancel() -- Stop the current tween
				end
				-- Cleanup is handled by the Completed connection when cancelled
			end
		else
			-- Character removed or invalid; stop the current tween and the sequence
			warn("TweenSequence: Character became invalid during Changed event for step", index)
			if currentTween and currentTween.PlaybackState == Enum.PlaybackState.Playing then
				currentTween:Cancel() -- Stop the current tween
			end
			-- Cleanup is handled by the Completed connection when cancelled
		end
	end)
	changedConnection = stepChangedConnection -- Store globally for potential cancellation

	-- When this tween step completes, start the next one or clean up
	stepCompletedConnection = currentTween.Completed:Connect(function(playbackState)
		print(string.format("Step %d tween completed with state: %s", index, tostring(playbackState)))

		-- Disconnect the connections for *this specific step* now that it's done
		if stepChangedConnection then
			print("Disconnecting Changed connection for completed step", index)
			stepChangedConnection:Disconnect()
		end
		if stepCompletedConnection then
			print("Disconnecting Completed connection for completed step", index)
			stepCompletedConnection:Disconnect()
		end
		-- Clear global references ONLY if they point to the connections of THIS step
		if changedConnection == stepChangedConnection then changedConnection = nil end
		if completedConnection == stepCompletedConnection then completedConnection = nil end
		if currentTween == currentTween then currentTween = nil end -- Clear ref to the completed tween
		if cframeValue == cframeValue then cframeValue:Destroy(); cframeValue = nil end -- Destroy the CFrameValue for this step


		if playbackState == Enum.PlaybackState.Completed then
			-- Proceed to the next step in the sequence
			print("Proceeding to next step from step", index)
			tweenSequence(index + 1)
		else
			-- If cancelled (e.g., by another click or character invalidation), clean up everything
			warn("Tween step", index, "did not complete normally (State:", tostring(playbackState), "). Stopping sequence.")
			cleanupTweenResources() -- Perform full cleanup
			currentSequenceIndex = 0 -- Reset tracker
		end
	end)
	completedConnection = stepCompletedConnection -- Store globally for potential cancellation

	-- Start the tween for the current step
	print("Playing tween for step", index)
	currentTween:Play()
end

-- Start the sequence when the button is clicked
print("--------------------")
print("Button clicked!")
-- Stop any currently running sequence before starting a new one
print("Calling cleanupTweenResources before starting new sequence.")
cleanupTweenResources()
-- Start the sequence from the first target
print("Initiating tweenSequence(1).")
tweenSequence(1)
